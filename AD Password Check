# Import Active Directory module
Import-Module ActiveDirectory

# Define the path to the text file containing email addresses
$EmailListPath = "C:\path\to\email_list.txt"

# Check if file exists
if (!(Test-Path $EmailListPath)) {
    Write-Host "Error: File not found at $EmailListPath" -ForegroundColor Red
    exit
}

# Read email addresses from the file
$RawEmails = Get-Content -Path $EmailListPath

# Extract content between < > brackets using regex
$Emails = $RawEmails | ForEach-Object {
    if ($_ -match "<(.*?)>") { $matches[1] }
} | Where-Object { $_ -ne $null }

# Create an array to store results
$Results = @()

# Loop through each extracted email and check password age
foreach ($Email in $Emails) {
    # Trim whitespace
    $Email = $Email.Trim()

    # Get user details from Active Directory
    $User = Get-ADUser -Filter {EmailAddress -eq $Email} -Properties PasswordLastSet

    if ($User) {
        # Calculate password age
        $PasswordLastSet = $User.PasswordLastSet
        $PasswordAge = (Get-Date) - $PasswordLastSet
        $PasswordAgeDays = [math]::Round($PasswordAge.TotalDays, 0)

        # Store results in array
        $Results += [PSCustomObject]@{
            Email = $Email
            PasswordAgeDays = $PasswordAgeDays
        }
    } else {
        Write-Host "User not found: $Email" -ForegroundColor Yellow
    }
}

# Sort results by most days since password change (descending)
$SortedResults = $Results | Sort-Object -Property PasswordAgeDays -Descending

# Display sorted results with color-coded days
foreach ($Result in $SortedResults) {
    $Color = if ($Result.PasswordAgeDays -ge 7) { "Red" } else { "Green" }
    Write-Host "User: $($Result.Email) | Password Age: " -NoNewline
    Write-Host "$($Result.PasswordAgeDays) days" -ForegroundColor $Color
}